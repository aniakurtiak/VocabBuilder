{"version":3,"file":"static/js/388.764d202e.chunk.js","mappings":"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","sources":["pages/DictionaryPage/DictionaryPage.styled.js","components/AddWordModal/AddWordModal.jsx","components/EditWordModal/EditWordModal.styled.js","components/EditWordModal/EditWordModal.jsx","components/ActionsPopover/ActionsPopover.styled.js","components/ActionsPopover/ActionsPopover.jsx","pages/DictionaryPage/DictionaryPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const DictionaryContainer = styled.div`\n  background: ${({ theme }) => theme.white1};\n  padding-top: 32px;\n  padding-left: 32px;\n  padding-right: 32px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 80px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    padding-left: 100px;\n    padding-right: 100px;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport {\n  AddWordModalContainer,\n  BtnClose,\n  BtnWrapper,\n  CategoriesWrapper,\n  ErrMsgCategories,\n  ErrMsgStyle,\n  FieldStyle,\n  FlagIcon,\n  FormBtn,\n  FormStyle,\n  FormWrapper,\n  InputWrapper,\n  LabelStyle,\n  ModalTitle,\n  ModaltText,\n  Option,\n  RadioBtnWrapper,\n  RadioInput,\n  RadioLabel,\n  StyledSelect,\n} from './AddWordModal.styled';\nimport sprite from '../../icons/sprites.svg';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  selectCategories, selectWordsError,\n} from '../../redux/selectors';\nimport { addWord, fetchOwnWords } from '../../redux/words/operations';\nimport toast from 'react-hot-toast';\n\n\nconst validationSchema = Yup.object().shape({\n  category: Yup.string().required('Category is required'),\n  verbType: Yup.string().when('category', {\n    is: 'verb',\n    then: Yup.string().required('Verb type is required'),\n  }),\n  en: Yup.string()\n    .matches(/\\b[A-Za-z'-]+(?:\\s+[A-Za-z'-]+)*\\b/, 'Invalid English input')\n    .required('English is required'),\n  ua: Yup.string()\n    .matches(/^(?![A-Za-z])[А-ЯІЄЇҐґа-яієїʼ\\s]+$/u, 'Invalid Ukrainian input')\n    .required('Ukrainian is required'),\n});\n\nexport const AddWordModal = ({ toggleModal, close }) => {\n  const categories = useSelector(selectCategories);\n  const dispatch = useDispatch();\n  const error = useSelector(selectWordsError);\n  const [verbType, setVerbType] = useState('');\n\n  const handleSubmit = values => {\n    const dataToSend = { ...values };\n    if (values.category === 'verb') {\n      dataToSend.isIrregular = verbType === 'irregular';\n    } \n    dispatch(addWord(dataToSend))\n    .unwrap()\n      .then(() => {\n        dispatch(fetchOwnWords());\n        close();\n      })\n      .catch(error => {\n        toast.error(error); \n      });\n  };\n\n  useEffect(() => {\n    if (error) {\n      toast.error(error);\n    }\n  }, [error]);\n\n  return (\n    <AddWordModalContainer>\n      <BtnClose onClick={toggleModal} type=\"button\">\n        <svg>\n          <use href={`${sprite}#icon-close`}></use>\n        </svg>\n      </BtnClose>\n      <ModalTitle>Add word</ModalTitle>\n      <ModaltText>\n        Adding a new word to the dictionary is an important step in enriching\n        the language base and expanding the vocabulary.\n      </ModaltText>\n\n      <Formik\n        initialValues={{\n          en: '',\n          ua: '',\n          category: '',\n        }}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ values, setFieldValue }) => (\n          <FormStyle>\n            <CategoriesWrapper>\n            <Field as={StyledSelect} name=\"category\" id=\"category\">\n                <option value=\"\">Categories</option>\n                {categories &&\n                  categories.map(category => (\n                    <Option key={category.value} value={category.value}>\n                      {category.value}\n                    </Option>\n                  ))}\n              </Field>\n              <ErrMsgCategories name=\"category\" component=\"div\" />\n\n              {values.category === 'Verb' && (\n                <RadioBtnWrapper>\n                  <RadioLabel>\n                  <RadioInput\n                      type=\"radio\"\n                      name=\"verbType\"\n                      value=\"regular\"\n                      checked={verbType === 'regular'}\n                      onChange={() => {\n                        setVerbType('regular');\n                        setFieldValue('isIrregular', false);\n                      }}\n                    />\n                    Regular\n                  </RadioLabel>\n                  <RadioLabel>\n                    <RadioInput\n                      type=\"radio\"\n                      name=\"verbType\"\n                      value=\"irregular\"\n                      checked={verbType === 'irregular'}\n                      onChange={() => {\n                        setVerbType('irregular');\n                        setFieldValue('isIrregular', true);\n                      }}\n                    />\n                    Irregular\n                  </RadioLabel>\n                  <ErrorMessage name=\"verbType\" component=\"div\" />\n                </RadioBtnWrapper>\n              )}\n            </CategoriesWrapper>\n\n            <FormWrapper>\n            <InputWrapper>\n              <LabelStyle htmlFor=\"ua\">\n                <FlagIcon>\n                  <use href={`${sprite}#icon-ua`}></use>\n                </FlagIcon>\n                Ukrainian\n              </LabelStyle>\n                <FieldStyle type=\"text\" name=\"ua\" id=\"ua\" />\n            </InputWrapper>\n                <ErrMsgStyle name=\"ua\" component=\"div\" />\n  \n           <InputWrapper>\n              <LabelStyle htmlFor=\"uk\">\n                <FlagIcon>\n                  <use href={`${sprite}#icon-uk`}></use>\n                </FlagIcon>\n                English\n              </LabelStyle>\n              <FieldStyle type=\"text\" name=\"en\" id=\"uk\" />\n           </InputWrapper>\n            <ErrMsgStyle name=\"en\" component=\"div\" />\n  \n        </FormWrapper>\n\n            <BtnWrapper>\n              <FormBtn type=\"submit\">Add</FormBtn>\n              <FormBtn type=\"button\" onClick={toggleModal}>\n                Cancel\n              </FormBtn>\n            </BtnWrapper>\n          </FormStyle>\n        )}\n      </Formik>\n    </AddWordModalContainer>\n  );\n};\n\n\n","import { ErrorMessage, Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const AddWordModalContainer = styled.div`\n  position: absolute;\n  width: 342px;\n  max-height: 100vh;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scalex(1);\n  border-radius: 15px;\n  background: ${({ theme }) => theme.green};\n  padding: 48px 16px;\n\n  @media screen and (min-width: 768px) {\n    width: 627px;\n    padding: 48px 64px;\n  }\n`;\n\nexport const BtnClose = styled.svg`\n  position: absolute;\n  top: 16px;\n  right: 16px;\n  width: 24px;\n  height: 24px;\n  background-color: transparent;\n  padding: 0;\n  cursor: pointer;\n  transition: transform 0.3s ease-in-out;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 32px;\n    height: 32px;\n    top: 20px;\n    right: 20px;\n  }\n`;\n\n// * =========== FORM ===========\nexport const FormStyle = styled(Form)`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FormWrapper = styled.div`\n  width: 100%;\n\n  @media screen and (min-width: 768px) {\n    display: flex;\n    flex-direction: column;\n    gap: 18px;\n  }\n`;\n\nexport const InputWrapper = styled.div`\n  @media screen and (min-width: 768px) {\n    display: flex;\n    gap: 32px;\n    align-items: center;\n  }\n`;\n\nexport const LabelStyle = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 4.5px;\n  margin-bottom: 4px;\n  font-weight: 500;\n  font-size: 14px;\n  color: ${({ theme }) => theme.white};\n\n  @media screen and (min-width: 768px) {\n    order: 2;\n    margin-bottom: 0;\n    gap: 8px;\n  }\n`;\n\nexport const FlagIcon = styled.svg`\n  width: 28px;\n  height: 28px;\n\n  @media screen and (min-width: 768px) {\n    width: 32px;\n    height: 32px;\n  }\n`;\n\nexport const FieldStyle = styled(Field)`\n  border: 1px solid #d1d5db;\n  background: ${({ theme }) => theme.green};\n  border-radius: 15px;\n  padding: 12px 24px;\n  width: 311px;\n  height: 48px;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 11.5;\n  color: ${({ theme }) => theme.white};\n  margin-bottom: 16px;\n\n  :hover {\n    outline: none;\n    border-color: ${({ theme }) => theme.white};\n  }\n\n  &:focus {\n    outline: none;\n    border-color: ${({ theme }) => theme.white};\n  }\n\n  @media screen and (min-width: 768px) {\n    order: 1;\n    border: 1px solid rgba(252, 252, 252, 0.3);\n    padding: 16px 18px;\n    width: 354px;\n    height: 56px;\n    margin-bottom: 0px;\n  }\n`;\n\nexport const ErrMsgStyle = styled(ErrorMessage)`\n  font-weight: 400;\n  font-size: 10px;\n  line-height: 120%;\n  color: ${({ theme }) => theme.white};\n  margin-top: -10px;\n  margin-bottom: 16px;\n`;\n\nexport const ErrMsgCategories = styled(ErrorMessage)`\n  font-weight: 400;\n  font-size: 10px;\n  line-height: 1.2;\n  color: ${({ theme }) => theme.white};\n  margin-top: 10px;\n  margin-bottom: 16px;\n`;\n\nexport const BtnWrapper = styled.div`\n  display: flex;\n  gap: 8px;\n  margin-top: 16px;\n\n  @media screen and (min-width: 768px) {\n    gap: 10px;\n    margin-top: 32px;\n  }\n`;\n\nexport const FormBtn = styled.button`\n  border: 1px solid rgba(252, 252, 252, 0.4);\n  border-radius: 30px;\n  padding: 12px 45px;\n  width: 159px;\n  height: 48px;\n  background: ${({ theme }) => theme.green};\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.5;\n  color: ${({ theme }) => theme.white};\n\n  &:hover {\n    background: ${({ theme }) => theme.white};\n    color: ${({ theme }) => theme.black};\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 245px;\n    height: 56px;\n  }\n`;\n// * =========== FORM ===========\n","import toast from 'react-hot-toast';\nimport { useDispatch } from 'react-redux';\nimport { selectSelectedWord } from '../../redux/selectors';\nimport * as Yup from 'yup';\nimport {\n  AddWordModalContainer,\n  BtnClose,\n  BtnWrapper,\n  ErrMsgStyle,\n  FieldStyle,\n  FlagIcon,\n  FormBtn,\n  FormStyle,\n  FormWrapper,\n  InputWrapper,\n  LabelStyle,\n} from './EditWordModal.styled';\nimport sprite from '../../icons/sprites.svg';\nimport { Formik } from 'formik';\nimport { useSelector } from 'react-redux';\nimport { editWord, fetchOwnWords } from '../../redux/words/operations';\n\nconst validationSchema = Yup.object().shape({\n  en: Yup.string()\n    .matches(/\\b[A-Za-z'-]+(?:\\s+[A-Za-z'-]+)*\\b/, 'Invalid English input')\n    .required('English is required'),\n  ua: Yup.string()\n    .matches(/^(?![A-Za-z])[А-ЯІЄЇҐґа-яієїʼ\\s]+$/u, 'Invalid Ukrainian input')\n    .required('Ukrainian is required'),\n});\n\nexport const EditWordModal = ({ toggleModal }) => {\n  const selectedWord = useSelector(selectSelectedWord);\n  const dispatch = useDispatch();\n\n  const { _id, category } = selectedWord;\n\n  const handleSubmit = values => {\n    let updatedValues = { ...values, category, id:_id};\n    if (category === 'verb') {\n      updatedValues = { ...updatedValues, isIrregular: true };\n    }\n    dispatch(editWord(updatedValues))\n      .unwrap()\n      .then(() => {\n        toast.success('Word updated successfully');\n        dispatch(fetchOwnWords());\n        toggleModal();\n      })\n      .catch(error => {\n        toast.error(error);\n      });\n\n  };\n  \n  \n\n  return (\n    <AddWordModalContainer>\n      <BtnClose onClick={toggleModal} type=\"button\">\n        <svg>\n          <use href={`${sprite}#icon-close`}></use>\n        </svg>\n      </BtnClose>\n\n      <Formik\n        initialValues={{\n          en: selectedWord.en,\n          ua: selectedWord.ua,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ values, handleSubmit }) => (\n          <FormStyle>\n            <FormWrapper>\n              <InputWrapper>\n                <LabelStyle htmlFor=\"ua\">\n                  <FlagIcon>\n                    <use href={`${sprite}#icon-ua`}></use>\n                  </FlagIcon>\n                  Ukrainian\n                </LabelStyle>\n                <FieldStyle type=\"text\" name=\"ua\" id=\"ua\" />\n              </InputWrapper>\n              <ErrMsgStyle name=\"ua\" component=\"div\" />\n\n              <InputWrapper>\n                <LabelStyle htmlFor=\"en\">\n                  <FlagIcon>\n                    <use href={`${sprite}#icon-uk`}></use>\n                  </FlagIcon>\n                  English\n                </LabelStyle>\n                <FieldStyle type=\"text\" name=\"en\" id=\"en\" />\n              </InputWrapper>\n              <ErrMsgStyle name=\"en\" component=\"div\" />\n            </FormWrapper>\n\n            <BtnWrapper>\n              <FormBtn type=\"submit\">Save</FormBtn>\n              <FormBtn type=\"button\" onClick={toggleModal}>\n                Cancel\n              </FormBtn>\n            </BtnWrapper>\n          </FormStyle>\n        )}\n      </Formik>\n    </AddWordModalContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const PopoverContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const ActionsPopoverContainer = styled.div`\n  position: relative;\n  border-radius: 15px;\n  padding: 12px 24px;\n  width: 117px;\n  height: 70px;\n  box-shadow: 0 4px 47px 0 rgba(18, 20, 23, 0.08);\n  background: #fff;\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  gap: 8px;\n\n    @media screen and (min-width: 768px) {\n        width: 124px;\n        height: 80px;\n    }\n`;\n\nexport const Icon = styled.svg`\n  width: 16px;\n  height: 16px;\n`;\n\nexport const ActionsBtn = styled.button`\n  background: none;\n  font-weight: 500;\n  font-size: 14px;\n  display: flex;\n    align-items: center;\n    justify-content: center;\n  gap: 8px;\n\n  &:hover {\n    color: ${({ theme }) => theme.black};\n    scale: 1.1;\n  }\n\n   \n\n    @media screen and (min-width: 768px) {\n        font-size: 16px;\n        line-height: 1.5;\n    }\n`;\n\nexport const IconDots = styled.svg`\n  width: 12px;\n  height: 12px;\n  fill: rgba(18, 20, 23, 0.5);\n  &:hover {\n    fill: ${({ theme }) => theme.black};\n  }\n  &:active {\n    fill: ${({ theme }) => theme.black};\n    }\n\n\n    @media screen and (min-width: 768px) {\n        width: 14px;\n        height: 14px;\n    }\n\n    @media screen and (min-width: 1440px) {\n        width: 16px;\n        height: 16px;\n    }\n`;\n","import React, { useState } from 'react';\nimport Popover from 'react-popover';\nimport {\n  ActionsBtn,\n  ActionsPopoverContainer,\n  Icon,\n  IconDots,\n  PopoverContainer,\n} from './ActionsPopover.styled';\nimport sprite from '../../icons/sprites.svg';\nimport { setSelectedWord } from '../../redux/words/wordsSlice';\nimport { useDispatch } from 'react-redux';\nimport { deleteWord, fetchOwnWords } from '../../redux/words/operations';\nimport toast from 'react-hot-toast';\n\n\nexport const ActionsPopover = ({ word, onClickEditWord }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dispatch = useDispatch();\n\n\n  const handleEditClick = word => {\n    dispatch(setSelectedWord(word));\n    onClickEditWord();\n  };\n\n\n  const handleDeleteClick = (word) => {\n    dispatch(deleteWord(word._id))\n    .unwrap()\n    .then(() => {\n      toast.success('This word was deleted');\n      dispatch(fetchOwnWords());\n    })\n    .catch(error => {\n      toast.error(error);\n    });\n  }\n\n  const togglePopover = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <PopoverContainer>\n      <Popover\n        isOpen={isOpen}\n        body={\n          <ActionsPopoverContainer>\n            <ActionsBtn\n              onClick={() => {\n                handleEditClick(word);\n              }}\n            >\n              <Icon>\n                <use href={`${sprite}#icon-edit`}></use>\n              </Icon>\n              Edit\n            </ActionsBtn>\n            <ActionsBtn onClick={()=> {handleDeleteClick(word)}}>\n              <Icon>\n                <use href={`${sprite}#icon-trash`}></use>\n              </Icon>\n              Delete\n            </ActionsBtn>\n          </ActionsPopoverContainer>\n        }\n        place=\"left\"\n        preferPlace=\"start\"\n        tipSize={0.1}\n        onOuterAction={togglePopover}\n      >\n        <ActionsBtn onClick={togglePopover}>\n          <IconDots>\n            <use href={`${sprite}#icon-dots`}></use>\n          </IconDots>\n        </ActionsBtn>\n      </Popover>\n    </PopoverContainer>\n  );\n};\n","import { Dashboard } from 'components/Dashboard/Dashboard';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { DictionaryContainer } from './DictionaryPage.styled';\nimport { WordsTable } from 'components/WordTable/WordsTable';\nimport { Modal } from 'components/Modal/Modal';\nimport { AddWordModal } from 'components/AddWordModal/AddWordModal';\nimport { EditWordModal } from 'components/EditWordModal/EditWordModal';\nimport sprite from '../../icons/sprites.svg';\nimport { ActionsPopover } from 'components/ActionsPopover/ActionsPopover';\nimport { useDispatch } from 'react-redux';\nimport { fetchOwnWords } from '../../redux/words/operations';\nimport { FlagIcon, IconContainer } from 'components/Layout/Layout.styled';\n\nconst DictionaryPage = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [addWordModal, setAddWordModal] = useState(false);\n  const [editWordModal, setEditWordModal] = useState(false);\n  const dispatch = useDispatch();\n\n  const toggleModal = useCallback(() => {\n    setIsOpen(prevState => !prevState);\n  }, [setIsOpen]);\n\n  const onClickAddWord = useCallback(() => {\n    setAddWordModal(true);\n    setEditWordModal(false);\n    toggleModal();\n  }, [setAddWordModal, setEditWordModal, toggleModal]);\n\n  const onClickEditWord = useCallback(() => {\n    setAddWordModal(false);\n    setEditWordModal(true);\n    toggleModal();\n  }, [setAddWordModal, setEditWordModal, toggleModal]);\n\n  const close = () => {\n    setIsOpen(false);\n  };\n\n  const IconUk = ({ text }) => (\n    <IconContainer>\n      <span>{text}</span>\n      <FlagIcon>\n        <use href={`${sprite}#icon-uk`}>z</use>\n      </FlagIcon>\n    </IconContainer>\n  );\n\n  const IconUa = ({ text }) => (\n    <IconContainer>\n      <span>{text}</span>\n      <FlagIcon>\n        <use href={`${sprite}#icon-ua`}>z</use>\n      </FlagIcon>\n    </IconContainer>\n  );\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: () => <IconUk text=\"Word\" />,\n        accessor: 'en',\n        width: 82,\n      },\n      {\n        Header: () => <IconUa text=\"Translation\" />,\n        accessor: 'ua',\n        width: 116,\n      },\n      {\n        Header: 'Progress',\n        accessor: 'progress',\n        width: 95,\n      },\n      {\n        Header: '',\n        accessor: 'actions',\n        Cell: ({ row }) => <ActionsPopover word={row.original} onClickEditWord={onClickEditWord} />,\n        width: 50,\n      }\n    ],\n    [onClickEditWord]\n  );\n\n  useEffect(() => {\n    dispatch(fetchOwnWords());\n  }, [dispatch]);\n\n\n  return (\n    <DictionaryContainer>\n      <Dashboard onClickAddWord={onClickAddWord}/>\n      <WordsTable columns = {columns}/>\n\n      {isOpen && (\n        <Modal toggleModal={toggleModal} >\n          {addWordModal && <AddWordModal toggleModal={toggleModal} close={close} />}\n          {editWordModal && <EditWordModal toggleModal={toggleModal} close={close}/>}\n        </Modal>\n      )}\n    </DictionaryContainer>\n  );\n};\n\nexport default DictionaryPage;\n"],"names":["DictionaryContainer","styled","_templateObject","_taggedTemplateLiteral","_ref","theme","white1","validationSchema","Yup","shape","category","required","verbType","when","is","then","en","matches","ua","AddWordModal","toggleModal","close","categories","useSelector","selectCategories","dispatch","useDispatch","error","selectWordsError","_useState","useState","_useState2","_slicedToArray","setVerbType","useEffect","toast","_jsxs","AddWordModalContainer","children","_jsx","BtnClose","onClick","type","href","concat","sprite","ModalTitle","ModaltText","Formik","initialValues","onSubmit","values","dataToSend","_objectSpread","isIrregular","addWord","unwrap","fetchOwnWords","catch","_ref2","setFieldValue","FormStyle","CategoriesWrapper","Field","as","StyledSelect","name","id","value","map","Option","ErrMsgCategories","component","RadioBtnWrapper","RadioLabel","RadioInput","checked","onChange","ErrorMessage","FormWrapper","InputWrapper","LabelStyle","htmlFor","FlagIcon","FieldStyle","ErrMsgStyle","BtnWrapper","FormBtn","green","_templateObject2","Form","_templateObject3","_templateObject4","_templateObject5","_templateObject6","white","_templateObject7","_templateObject8","_ref3","_ref4","_ref5","_ref6","_templateObject9","_ref7","_templateObject10","_ref8","_templateObject11","_templateObject12","_ref9","_ref10","_ref11","_ref12","black","EditWordModal","selectedWord","selectSelectedWord","_id","updatedValues","editWord","handleSubmit","PopoverContainer","ActionsPopoverContainer","Icon","ActionsBtn","IconDots","ActionsPopover","word","onClickEditWord","isOpen","setIsOpen","togglePopover","Popover","body","setSelectedWord","handleEditClick","deleteWord","handleDeleteClick","place","preferPlace","tipSize","onOuterAction","_useState3","_useState4","addWordModal","setAddWordModal","_useState5","_useState6","editWordModal","setEditWordModal","useCallback","prevState","onClickAddWord","IconUk","text","IconContainer","IconUa","columns","React","Header","accessor","width","Cell","row","original","Dashboard","WordsTable","Modal"],"sourceRoot":""}