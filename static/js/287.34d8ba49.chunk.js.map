{"version":3,"file":"static/js/287.34d8ba49.chunk.js","mappings":"+MAEaA,EAAqBC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oXAC5B,SAAAC,GAAQ,OAAAA,EAALC,MAAkBC,MAAM,IAoB9BC,EAAWN,EAAAA,GAAAA,OAAaO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,gHAQxBM,EAAWR,EAAAA,GAAAA,IAAUS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,2CAKrBQ,EAAeV,EAAAA,GAAAA,KAAWW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,uK,yFCgEvC,EApFsB,WACpB,IAAMU,GAAWC,EAAAA,EAAAA,MAgBXC,EAAS,SAAHX,GAAA,IAAMY,EAAIZ,EAAJY,KAAI,OACpBC,EAAAA,EAAAA,MAACC,EAAAA,GAAa,CAAAC,SAAA,EACZC,EAAAA,EAAAA,KAAA,QAAAD,SAAOH,KACPI,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAAAF,UACPC,EAAAA,EAAAA,KAAA,OAAKE,KAAI,GAAAC,OAAKC,EAAAA,EAAM,kBAER,EAGZC,EAAS,SAAHC,GAAA,IAAMV,EAAIU,EAAJV,KAAI,OACpBC,EAAAA,EAAAA,MAACC,EAAAA,GAAa,CAAAC,SAAA,EACZC,EAAAA,EAAAA,KAAA,QAAAD,SAAOH,KACPI,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAAAF,UACPC,EAAAA,EAAAA,KAAA,OAAKE,KAAI,GAAAC,OAAKC,EAAAA,EAAM,kBAER,EAGZG,EAAY,SAAHC,GAAA,IAAMZ,EAAIY,EAAJZ,KAAMa,EAAID,EAAJC,KAAI,OACzBZ,EAAAA,EAAAA,MAACV,EAAQ,CAACuB,KAAK,SAASC,QAAS,YAjCT,SAACF,GAC7BG,QAAQC,IAAIJ,EAAKK,KACjBrB,GAASsB,EAAAA,EAAAA,IAAqBN,EAAKK,MAClCE,SACEC,MAAK,WACJC,EAAAA,GAAAA,QAAc,2BAClBzB,GAAS0B,EAAAA,EAAAA,MACX,IACCC,OAAM,SAAAC,GACLH,EAAAA,GAAAA,MAAYG,EACd,GACA,CAsB6CC,CAAsBb,EAAK,EAAEV,SAAA,EAClEC,EAAAA,EAAAA,KAACT,EAAY,CAAAQ,SAAEH,KACfI,EAAAA,EAAAA,KAACX,EAAQ,CAAAU,UACPC,EAAAA,EAAAA,KAAA,OAAKE,KAAI,GAAAC,OAAKC,EAAAA,EAAM,0BAEb,EAIXmB,EAAUC,EAAAA,SACd,iBAAM,CACJ,CACEC,OAAQ,kBAAMzB,EAAAA,EAAAA,KAACL,EAAM,CAACC,KAAK,QAAS,EACpC8B,SAAU,KACVC,MAAO,IAET,CACEF,OAAQ,kBAAMzB,EAAAA,EAAAA,KAACK,EAAM,CAACT,KAAK,eAAgB,EAC3C8B,SAAU,KACVC,MAAO,KAET,CACEF,OAAQ,WACRC,SAAU,WACVC,MAAO,IAET,CACEF,OAAQ,GACRC,SAAU,UACVE,KAAM,SAAAC,GAAA,IAAEC,EAAGD,EAAHC,IAAG,OAAM9B,EAAAA,EAAAA,KAACO,EAAS,CAACX,KAAK,oBAAoBa,KAAQqB,EAAIC,UAAY,EAC7EJ,MAAO,IAEV,GACD,IAOF,OAJAK,EAAAA,EAAAA,YAAU,WACRvC,GAAS0B,EAAAA,EAAAA,MACX,GAAG,CAAC1B,KAGFI,EAAAA,EAAAA,MAACjB,EAAkB,CAAAmB,SAAA,EACjBC,EAAAA,EAAAA,KAACiC,EAAAA,EAAS,KACVjC,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAACX,QAASA,MAG3B,C","sources":["pages/RecommendPage/RecommendPage.styled.js","pages/RecommendPage/RecommendPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const RecommendContainer = styled.div`\n  background: ${({ theme }) => theme.white1};\n  padding-top: 32px;\n  padding-left: 32px;\n  padding-right: 32px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 80px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    padding-left: 100px;\n    padding-right: 100px;\n  }\n`;\n\n\nexport const ArrowBtn = styled.button`\n  background: none;\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  gap: 2px;\n`;\n\nexport const ArrowSvg = styled.svg`\n  width: 20px;\n  height: 20px;\n`;\n\nexport const ArrowSpanBtn = styled.span`\n  display: none;\n\n  @media screen and (min-width: 768px) {\n    display: block;\n    font-weight: 500;\n    font-size: 14px;\n    text-align: start;\n  }\n`;\n","import React, { useEffect } from 'react';\nimport {\n  ArrowBtn,\n  ArrowSpanBtn,\n  ArrowSvg,\n  RecommendContainer,\n} from './RecommendPage.styled';\nimport { Dashboard } from 'components/Dashboard/Dashboard';\nimport { IconContainer } from 'components/Layout/Layout.styled';\nimport { FlagIcon } from 'components/AddWordModal/AddWordModal.styled';\nimport sprite from '../../icons/sprites.svg';\nimport { useDispatch } from 'react-redux';\nimport { addWordFromOtherUser, fetchAllWords } from '../../redux/words/operations';\nimport { WordsTable } from 'components/WordTable/WordsTable';\nimport toast from 'react-hot-toast';\n\nconst RecommendPage = () => {\n  const dispatch = useDispatch();\n\n  const handleAddToDictionary = (word) => {\n    console.log(word._id);\n    dispatch(addWordFromOtherUser(word._id))\n    .unwrap()\n      .then(() => {\n        toast.success('Word added successfully');\n    dispatch(fetchAllWords());\n  })\n  .catch(error => {\n    toast.error(error);\n  });\n  }\n\n\n  const IconUk = ({ text }) => (\n    <IconContainer>\n      <span>{text}</span>\n      <FlagIcon>\n        <use href={`${sprite}#icon-uk`}></use>\n      </FlagIcon>\n    </IconContainer>\n  );\n\n  const IconUa = ({ text }) => (\n    <IconContainer>\n      <span>{text}</span>\n      <FlagIcon>\n        <use href={`${sprite}#icon-ua`}></use>\n      </FlagIcon>\n    </IconContainer>\n  );\n\n  const ArrowIcon = ({ text, word}) => (\n        <ArrowBtn type='button' onClick={()=> {handleAddToDictionary(word)}}>\n          <ArrowSpanBtn>{text}</ArrowSpanBtn>\n          <ArrowSvg>\n            <use href={`${sprite}#icon-horizontal`}></use>\n          </ArrowSvg>\n        </ArrowBtn>\n\n  );\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: () => <IconUk text=\"Word\" />,\n        accessor: 'en',\n        width: 90,\n      },\n      {\n        Header: () => <IconUa text=\"Translation\" />,\n        accessor: 'ua',\n        width: 116,\n      },\n      {\n        Header: 'Category',\n        accessor: 'category',\n        width: 99,\n      },\n      {\n        Header: '',\n        accessor: 'actions',\n        Cell: ({row}) => <ArrowIcon text=\"Add to dictionary\" word = {row.original} />,\n        width: 50,\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    dispatch(fetchAllWords());\n  }, [dispatch]);\n\n  return (\n    <RecommendContainer>\n      <Dashboard />\n      <WordsTable columns={columns} />\n    </RecommendContainer>\n  );\n};\n\nexport default RecommendPage;\n"],"names":["RecommendContainer","styled","_templateObject","_taggedTemplateLiteral","_ref","theme","white1","ArrowBtn","_templateObject2","ArrowSvg","_templateObject3","ArrowSpanBtn","_templateObject4","dispatch","useDispatch","IconUk","text","_jsxs","IconContainer","children","_jsx","FlagIcon","href","concat","sprite","IconUa","_ref2","ArrowIcon","_ref3","word","type","onClick","console","log","_id","addWordFromOtherUser","unwrap","then","toast","fetchAllWords","catch","error","handleAddToDictionary","columns","React","Header","accessor","width","Cell","_ref4","row","original","useEffect","Dashboard","WordsTable"],"sourceRoot":""}