{"version":3,"file":"static/js/192.b54a2eb6.chunk.js","mappings":"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","sources":["pages/DictionaryPage/DictionaryPage.styled.js","components/WordTable/WordsTable.styled.js","components/WordTable/WordsTable.jsx","pages/DictionaryPage/DictionaryPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const DictionaryContainer = styled.div`\n  background: ${({ theme }) => theme.white1};\n  padding-top: 32px;\n  padding-left: 32px;\n  padding-right: 32px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 80px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    padding-left: 100px;\n    padding-right: 100px;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const WordsTableContainer = styled.div`\n  margin-top: 32px;\n`;\n\nexport const TableStyle = styled.table`\n  border-collapse: collapse;\n  width: 100%;\n`;\n\nexport const TableHead = styled.thead`\n  background: rgba(133, 170, 159, 0.1);\n`;\n\nexport const HeadRow = styled.th`\n  border-bottom: 1px solid #dbdbdb;\n  border-right: 1px solid #dbdbdb;\n  &:last-child {\n    border-right: none;\n    border-radius: 0 8px 0 0;\n  }\n  &:first-child {\n    border-radius: 8px 0 0 0;\n  }\n  font-weight: 500;\n  font-size: 16px;\n  width: ${({ width }) => width}px;\n  padding: 16px 14px;\n`;\n\nexport const TableBody = styled.tbody`\n  box-sizing: border-box;\n`;\n\nexport const TableRow = styled.td`\n  font-size: 14px;\n  border-top: 1px solid #dbdbdb; \n  border-right: 1px solid #dbdbdb; \n  border-left: none; \n  padding: 8px; \n  &:first-child {\n    border-left: none; \n  }\n  &:last-child {\n    border-right: none; \n  padding: 16px 10px 16px 14px;\n  white-space: pre-wrap;\n  background: ${({ theme }) => theme.white};\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWords } from '../../redux/selectors';\nimport { fetchOwnWords } from '../../redux/words/operations';\nimport { useTable } from 'react-table';\nimport { HeadRow, TableBody, TableHead, TableRow, TableStyle, WordsTableContainer } from './WordsTable.styled';\n\nexport const WordsTable = () => {\n    const words = useSelector(selectWords);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchOwnWords());\n    }, [dispatch]);\n\n    const columns = React.useMemo(\n        () => [\n            {\n                Header: 'Word',\n                accessor: 'en',\n                width: 82, \n            },\n            {\n                Header: 'Translation',\n                accessor: 'ua',\n                width: 116, \n            },\n            {\n                Header: 'Progress',\n                accessor: 'progress',\n                width: 95, \n            },\n            {\n                Header: '',\n                accessor: 'actions',\n                Cell: () => (\n                    <button>\n                        Add\n                    </button>\n                ),\n                width: 50, \n            },\n        ],\n        []\n    );\n\n    const data = React.useMemo(() => words || [], [words]);\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = useTable({ columns, data });\n\n    return (\n        <WordsTableContainer>\n            <TableStyle {...getTableProps()}>\n                <TableHead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <HeadRow {...column.getHeaderProps()} width={column.width}>{column.render('Header')}</HeadRow>\n                            ))}\n                        </tr>\n                    ))}\n                </TableHead>\n                <TableBody {...getTableBodyProps()}>\n                    {rows.map(row => {\n                        prepareRow(row);\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => (\n                                    <TableRow {...cell.getCellProps()}>{cell.render('Cell')}</TableRow>\n                                ))}\n                            </tr>\n                        );\n                    })}\n                </TableBody>\n            </TableStyle>\n        </WordsTableContainer>\n    );\n};\n","import { Dashboard } from 'components/Dashboard/Dashboard';\nimport React from 'react';\nimport { DictionaryContainer } from './DictionaryPage.styled';\nimport { WordsTable } from 'components/WordTable/WordsTable';\n\nconst DictionaryPage = () => {\n  return (\n    <DictionaryContainer>\n      <Dashboard />\n      <WordsTable />\n    </DictionaryContainer>\n  );\n};\n\nexport default DictionaryPage;\n"],"names":["DictionaryContainer","styled","_templateObject","_taggedTemplateLiteral","_ref","theme","white1","WordsTableContainer","TableStyle","_templateObject2","TableHead","_templateObject3","HeadRow","_templateObject4","width","TableBody","_templateObject5","TableRow","_templateObject6","_ref2","white","WordsTable","words","useSelector","selectWords","dispatch","useDispatch","useEffect","fetchOwnWords","columns","React","Header","accessor","Cell","_jsx","children","data","_useTable","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","_jsxs","_objectSpread","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","Dashboard"],"sourceRoot":""}